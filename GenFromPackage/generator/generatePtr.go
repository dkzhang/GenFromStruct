package generator

import (
	"GenFromStruct/GenFromPackage/model"
	"fmt"
	. "github.com/dave/jennifer/jen"
	"go/types"
	"os"
	"path/filepath"
)

func GenerateModelPtr(si model.StructInfo) error {
	modelPath := filepath.Join(si.FilePath, "model")
	modelFileName := filepath.Join(modelPath, si.StructName+"Ptr"+".go")

	// make path if not exist
	_, err := os.Stat(modelPath)
	if os.IsNotExist(err) {
		os.Mkdir(modelPath, os.ModePerm)
	}

	// create model file
	f := NewFile("model")
	f.PackageComment("Code generated by generator.")

	structFields := make([]Code, len(si.Fields))

	// 4. Iterate over struct fields
	for i := 0; i < len(si.Fields); i++ {
		field := si.Fields[i]

		// Generate code for each changeset field
		code := Id(field.Name)
		switch v := field.Type.(type) {
		case *types.Basic:
			code.Op("*").Id(v.String())
		case *types.Named:
			typeName := v.Obj()
			// Qual automatically imports packages
			code.Op("*").Qual(
				typeName.Pkg().Path(),
				typeName.Name(),
			)
		default:
			return fmt.Errorf("struct field type not hanled: %T", v)
		}
		tags := make(map[string]string, 2)
		tags["json"] = field.TagMap["json"]
		tags["db"] = field.TagMap["db"]
		code.Tag(tags)

		structFields[i] = code
	}

	// Generate changeset type
	changeSetName := si.StructName + "Ptr"
	f.Type().Id(changeSetName).Struct(structFields...)

	//////////////////////////////////////////////////////////////////////////////
	// Generate ToDbMap function
	// 1. Collect code in toMap() block
	var toMapBlock []Code

	// 2. Build "m := make(map[string]interface{})"
	toMapBlock = append(toMapBlock, Id("m").Op(":=").Make(Map(String()).Interface()))

	for i := 0; i < len(si.Fields); i++ {
		field := si.Fields[i]

		// 3. Build "if c.Field != nil { m["col"] = *c.Field }"
		code := If(Id("c").Dot(field.Name).Op("!=").Nil()).Block(
			Id("m").Index(Lit(field.TagMap["db"])).Op("=").Op("*").Id("c").Dot(field.Name),
		)
		toMapBlock = append(toMapBlock, code)
	}

	// 4. Build return statement
	toMapBlock = append(toMapBlock, Return(Id("m")))

	// 5. Build toMap method
	f.Func().Params(
		Id("c").Id(changeSetName),
	).Id("toDbMap").Params().Map(String()).Interface().Block(
		toMapBlock...,
	)

	// Write generated file
	return f.Save(modelFileName)
}
