package generator

import (
	"GenFromStruct/GenFromPackage/model"
	"GenFromStruct/utils"
	. "github.com/dave/jennifer/jen"
	"os"
	"path/filepath"
)

func GenerateDbOps(si model.StructInfo) error {
	modelPath := filepath.Join(si.FilePath, "dbOps")
	modelFileName := filepath.Join(modelPath, si.StructName+".go")

	// make path if not exist
	_, err := os.Stat(modelPath)
	if os.IsNotExist(err) {
		os.Mkdir(modelPath, os.ModePerm)
	}

	// create model file
	f := NewFile("model")
	f.PackageComment("Code generated by generator.")

	// Generate ToDbMap function
	// 1. Collect code in toMap() block
	var InsertOpsBlock []Code

	// 2. Build "m := make(map[string]interface{})"
	//InsertOpsBlock = append(InsertOpsBlock, Id("m").Op(":=").Make(Map(String()).Interface()))
	structPtrName := si.StructName + "Ptr"

	code := List(Id("_"), Id("err")).Op(":=").
		Qual("github.com/Masterminds/squirrel", "Insert").
		Call(Lit(si.TableName)).
		Dot("SetMap").Call(Id(utils.Camel2camel(structPtrName)).Dot("ToDbMap").Call()).
		Dot("RunWith").Call(Id("runner")).
		Dot("PlaceholderFormat").Call(Id("squirrel.Dollar")).
		Dot("ExecContext").Call(Id("ctx"))

	InsertOpsBlock = append(InsertOpsBlock, code)

	// 4. Build return statement
	InsertOpsBlock = append(InsertOpsBlock, Return(Id("err")))

	// 5. Build Insert method
	f.Func().Id("Insert"+si.StructName).
		Params(Id("ctx").Qual("context", "Context"),
			Id("runner").Qual("github.com/Masterminds/squirrel", "BaseRunner"),
			Id(utils.Camel2camel(structPtrName)).Qual(si.PackagePath+"/model", structPtrName),
		).Error().Block(
		InsertOpsBlock...,
	)

	// Write generated file
	return f.Save(modelFileName)
}
