package generator

import (
	"GenFromStruct/GenFromPackage/model"
	"GenFromStruct/utils"
	. "github.com/dave/jennifer/jen"
	"os"
	"path/filepath"
)

func GenerateDbOps(si model.StructInfo) error {
	modelPath := filepath.Join(si.FilePath, "dbOps")
	modelFileName := filepath.Join(modelPath, si.StructName+".go")

	// make path if not exist
	_, err := os.Stat(modelPath)
	if os.IsNotExist(err) {
		os.Mkdir(modelPath, os.ModePerm)
	}

	// create model file
	f := NewFile("model")
	f.PackageComment("Code generated by generator.")

	GenInsert(si, f)
	GenUpdate(si, f)

	// Write generated file
	return f.Save(modelFileName)
}

func GenInsert(si model.StructInfo, f *File) {
	structPtrName := si.StructName + "Ptr"
	// Generate ToDbMap function
	// 1. Collect code in Insert() block
	var InsertOpsBlock []Code

	// 2. Build
	//	_, err := squirrel.Insert("products").
	//		SetMap(productPtr).
	//		RunWith(runner).
	//		PlaceholderFormat(squirrel.Dollar).
	//		ExecContext(ctx)
	code := List(Id("_"), Id("err")).Op(":=").
		Qual("github.com/Masterminds/squirrel", "Insert").
		Call(Lit(si.TableName)).
		Dot("SetMap").Call(Id(utils.Camel2camel(structPtrName)).Dot("ToDbMap").Call()).
		Dot("RunWith").Call(Id("runner")).
		Dot("PlaceholderFormat").Call(Id("squirrel.Dollar")).
		Dot("ExecContext").Call(Id("ctx"))

	InsertOpsBlock = append(InsertOpsBlock, code)

	// 4. Build "return err"
	InsertOpsBlock = append(InsertOpsBlock, Return(Id("err")))

	// 5. Build Insert method
	// func InsertProduct(ctx context.Context,
	//		runner squirrel.BaseRunner, product model.ProductPtr) error {
	f.Func().Id("Insert"+si.StructName).
		Params(Id("ctx").Qual("context", "Context"),
			Id("runner").Qual("github.com/Masterminds/squirrel", "BaseRunner"),
			Id(utils.Camel2camel(structPtrName)).Qual(si.PackagePath+"/model", structPtrName),
		).Error().Block(
		InsertOpsBlock...,
	)
}

func GenUpdate(si model.StructInfo, f *File) {
	structPtrName := si.StructName + "Ptr"
	// Generate ToDbMap function
	// 1. Collect code in Insert() block
	var UpdateOpsBlock []Code

	// 2. Build
	//	_, err := squirrel.Insert("products").
	//		SetMap(productPtr).
	//		RunWith(runner).
	//		PlaceholderFormat(squirrel.Dollar).
	//		ExecContext(ctx)
	idDbName := "id"
	for _, field := range si.Fields {
		if field.Name == "ID" {
			idDbName = field.TagMap["db"]
			break
		}
	}

	codeUpdate := List(Id("res"), Id("err")).Op(":=").
		Qual("github.com/Masterminds/squirrel", "Update").
		Call(Lit(si.TableName)).
		Dot("Where").Call(Id("squirrel.Eq").
		Values(Dict{Lit(idDbName): Op("*").Call(Id(utils.Camel2camel(structPtrName)).Dot("ID"))})).
		Dot("SetMap").Call(Id(utils.Camel2camel(structPtrName)).Dot("ToDbMap").Call()).
		Dot("RunWith").Call(Id("runner")).
		Dot("PlaceholderFormat").Call(Id("squirrel.Dollar")).
		Dot("ExecContext").Call(Id("ctx"))

	codeUpdateCheck := If(Id("err").Op("!=").Nil()).Block(
		Return(Id("err")),
	)
	UpdateOpsBlock = append(UpdateOpsBlock, codeUpdate, codeUpdateCheck)

	codeRowAffected := List(Id("rowsAffected"), Id("err")).Op(":=").Id("res").Dot("RowsAffected").Call()
	codeRowAffectedErrCheck := If(Id("err").Op("!=").Nil()).Block(
		Return(Id("err")),
	)
	codeRowAffectedCheck := If(Id("rowsAffected").Op("!=").Lit(1)).Block(
		Return(Qual("fmt", "Errorf").
			Call(Lit("rows affected %d rows, but expected 1"), Id("rowsAffected"))),
	)
	UpdateOpsBlock = append(UpdateOpsBlock, codeRowAffected, codeRowAffectedErrCheck, codeRowAffectedCheck)

	// 4. Build "return err"
	UpdateOpsBlock = append(UpdateOpsBlock, Return(Id("err")))

	// 5. Build Insert method
	// func InsertProduct(ctx context.Context,
	//		runner squirrel.BaseRunner, product model.ProductPtr) error {
	f.Func().Id("Update"+si.StructName).
		Params(Id("ctx").Qual("context", "Context"),
			Id("runner").Qual("github.com/Masterminds/squirrel", "BaseRunner"),
			Id(utils.Camel2camel(structPtrName)).Qual(si.PackagePath+"/model", structPtrName),
		).Error().Block(
		UpdateOpsBlock...,
	)
}
