package generator

import (
	"GenFromStruct/GenFromPackage/model"
	"fmt"
	"go/types"
	"os"
	"path/filepath"

	. "github.com/dave/jennifer/jen"
)

func GenerateModel(si model.StructInfo) error {
	basePath := "./"
	modelPath := filepath.Join(basePath, "model")
	modelFileName := filepath.Join(modelPath, si.ClassName+".go")

	// make path if not exist
	_, err := os.Stat(modelPath)
	if os.IsNotExist(err) {
		os.Mkdir(modelPath, os.ModePerm)
	}

	// create model file
	f := NewFile("model")
	f.PackageComment("Code generated by generator.")

	changeSetFields := make([]Code, len(si.Fields))

	// 4. Iterate over struct fields
	for i := 0; i < len(si.Fields); i++ {
		field := si.Fields[i]

		// Generate code for each changeset field
		code := Id(field.Name)
		switch v := field.Type.(type) {
		case *types.Basic:
			code.Op("*").Id(v.String())
		case *types.Named:
			typeName := v.Obj()
			// Qual automatically imports packages
			code.Op("*").Qual(
				typeName.Pkg().Path(),
				typeName.Name(),
			)
		default:
			return fmt.Errorf("struct field type not hanled: %T", v)
		}
		changeSetFields[i] = code
	}

	// Generate changeset type
	changeSetName := si.ClassName + "ChangeSet"
	f.Type().Id(changeSetName).Struct(changeSetFields...)

	// Write generated file
	return f.Save(modelFileName)
}

func GenerateModelChangeSet(si model.StructInfo) error {
	basePath := "./"
	modelPath := filepath.Join(basePath, "model")
	modelFileName := filepath.Join(modelPath, si.ClassName+".go")

	// make path if not exist
	_, err := os.Stat(modelPath)
	if os.IsNotExist(err) {
		os.Mkdir(modelPath, os.ModePerm)
	}

	// create model file
	f := NewFile("model")
	f.PackageComment("Code generated by generator.")

	changeSetFields := make([]Code, len(si.Fields))

	// 4. Iterate over struct fields
	for i := 0; i < len(si.Fields); i++ {
		field := si.Fields[i]

		// Generate code for each changeset field
		code := Id(field.Name)
		switch v := field.Type.(type) {
		case *types.Basic:
			code.Op("*").Id(v.String())
		case *types.Named:
			typeName := v.Obj()
			// Qual automatically imports packages
			code.Op("*").Qual(
				typeName.Pkg().Path(),
				typeName.Name(),
			)
		default:
			return fmt.Errorf("struct field type not hanled: %T", v)
		}
		changeSetFields[i] = code
	}

	// Generate changeset type
	changeSetName := si.ClassName + "ChangeSet"
	f.Type().Id(changeSetName).Struct(changeSetFields...)

	// Write generated file
	return f.Save(modelFileName)
}
