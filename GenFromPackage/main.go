package main

import (
	"GenFromStruct/GenFromPackage/generator"
	"GenFromStruct/GenFromPackage/parser"
	"GenFromStruct/GenFromPackage/processor"
	"fmt"
	"go/types"
	"os"
	"path/filepath"
	"strings"

	. "github.com/dave/jennifer/jen"
)

func main() {
	// ...
	si := parser.Parse("GenFromStruct/sampleData/mypack.Project_ToG") //si := parser.Parse("GenFromStruct/sampleData/mypack.Project_ToG")

	os.Setenv("GOPACKAGE", "project")

	// Generate code using jennifer
	//err := generate(sourceTypeName, structType)
	//if err != nil {
	//	log.Fatal(err)
	//}

	psi := processor.ProcessTag(si)
	generator.GenerateModel(psi)
	//generator.GenerateModelChangeSet(psi)
}

func generate(sourceTypeName string, structType *types.Struct) error {

	// 1. Get the package of the file with go:generate comment
	goPackage := os.Getenv("GOPACKAGE")

	// 2. Start a new file in this package
	f := NewFile(goPackage)

	// 3. Add a package comment, so IDEs detect files as generated
	f.PackageComment("Code generated by generator.")

	changeSetFields := make([]Code, structType.NumFields())

	// 4. Iterate over struct fields
	for i := 0; i < structType.NumFields(); i++ {
		field := structType.Field(i)

		// Generate code for each changeset field
		code := Id(field.Name())
		switch v := field.Type().(type) {
		case *types.Basic:
			code.Op("*").Id(v.String())
		case *types.Named:
			typeName := v.Obj()
			// Qual automatically imports packages
			code.Op("*").Qual(
				typeName.Pkg().Path(),
				typeName.Name(),
			)
		default:
			return fmt.Errorf("struct field type not hanled: %T", v)
		}
		changeSetFields[i] = code
	}

	// 5. Generate changeset type
	changeSetName := sourceTypeName + "ChangeSet"
	f.Type().Id(changeSetName).Struct(changeSetFields...)

	// 6. Build the target file name
	goFile := os.Getenv("GOFILE")
	ext := filepath.Ext(goFile)
	baseFilename := goFile[0 : len(goFile)-len(ext)]
	targetFilename := baseFilename + "_" + strings.ToLower(sourceTypeName) + "_gen.go"

	// 7. Write generated file
	return f.Save(targetFilename)
}

// ...
